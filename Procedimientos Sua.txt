delimiter //
CREATE DEFINER=root@localhost PROCEDURE SP_Empleado_Listar()
BEGIN
    SELECT 
        Empl_Id,
        Empl_DNI,
        CONCAT(Empl_Nombre, ' ', Empl_Apellido) AS Empleado,
        Empl_Correo,
        CASE Empl_Sexo WHEN 'F' THEN 'Femenino' ELSE 'Masculino' END AS Empl_Sexo,
        Empl_FechaNac,
        M.Muni_Municipio,
        C.Esta_EstadoCivil,
        CA.Carg_Cargo,
        S.Sucu_Nombre
    FROM dbsistemaesmeralda.gral_tbempleados E
    LEFT JOIN gral_tbmunicipios M ON M.Muni_Codigo = E.Muni_Codigo
    LEFT JOIN gral_tbestadosciviles C ON C.Esta_Id = E.Esta_Id
    LEFT JOIN gral_tbcargos CA ON CA.Carg_Id = E.Carg_Id
    LEFT JOIN gral_tbsucursales S ON S.Sucu_Id = E.Sucu_Id
    WHERE Empl_Estado = 1;
END
//
delimiter ;

delimiter //
CREATE PROCEDURE SP_FacturaCompra_Listar()
BEGIN
    SELECT
		FaCE_Id,
		P.Prov_Proveedor as nombreProveedor,
		M.Mepa_Metodo as mepa_Metodo,
		FaCE_fechafinalizacion as faCE_fechafinalizacion,
		case FaCE_Finalizada when 0 then 'Si' ELSE 'No' END AS faCE_Finalizada
	FROM dbsistemaesmeralda.vent_tbfacturacompraencabezado fe LEFT JOIN gral_tbproveedores P
	ON P.Prov_Id = fe.Prov_Id left join gral_tbmetodospago M
	ON M.Mepa_Id = fe.Mepa_Id
	where FaCE_Etado = 1;
END
//
delimiter ;

delimiter //
CREATE DEFINER=root@localhost PROCEDURE SP_Usuario_Listar()
BEGIN
    SELECT
 Usua_Id, 
    Usua_Usuario, 
    Usua_Contrase単a, 
    CASE Usua_Administrador WHEN 1 THEN 'SI' ELSE 'NO' END AS Usua_Administradores, 
	R.Role_Rol,
    CONCAT(Empl_Nombre, ' ', Empl_Apellido) AS Empleado,
    Usua_UsuarioCreacion, 
    Usua_FechaCreacion, 
    Usua_UsuarioModificacion, 
    Usua_FechaModificacion, 
    Usua_Estado
  FROM dbsistemaesmeralda.acce_tbusuarios U
  LEFT JOIN acce_tbroles R ON R.Role_Id = U.Role_Id
  LEFT JOIN gral_tbempleados E ON E.Empl_Id = U.Empl_Id
  WHERE Usua_Estado = 1;
END
//
delimiter ;

DELIMITER //
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_Empleados_insertar`(
    IN `Empl_Nombre` NVARCHAR(30),
    IN `Empl_Apellido` NVARCHAR(30),
    IN `Empl_Sexo` CHAR(1),
    IN `Empl_FechaNac` DATETIME,
    IN `Empl_DNI` VARCHAR(13),
    IN `Muni_Codigo` VARCHAR(4),
    IN `Sucu_Id` INT,
    IN `Esta_Id` INT,
    IN `Carg_Id` INT,
    IN `Empl_Correo` VARCHAR(200),
    IN `Empl_UsuarioCreacion` INT,
    IN `Empl_FechaCreacion` DATETIME
)
BEGIN
    START TRANSACTION;
    BEGIN
        INSERT INTO `gral_tbempleados` (
            `Empl_Nombre`, 
            `Empl_Apellido`, 
            `Empl_Sexo`, 
            `Empl_FechaNac`,
            `Empl_DNI`,
            `Muni_Codigo`, 
            `Sucu_Id`,
            `Esta_Id`, 
            `Carg_Id`, 
            `Empl_Correo`,
            `Empl_Estado`, 
            `Empl_UsuarioCreacion`, 
            `Empl_FechaCreacion`
        ) VALUES (
            Empl_Nombre, 
            Empl_Apellido, 
            Empl_Sexo, 
            Empl_FechaNac, 
            Empl_DNI,
            Muni_Codigo,
            Sucu_Id,
            Esta_Id, 
            Carg_Id, 
            Empl_Correo,
            1,
            Empl_UsuarioCreacion, 
            Empl_FechaCreacion
        );
        COMMIT;
        SELECT 1 AS Resultado;
    END;
END;//
DELIMITER ;

ALTER TABLE dbsistemaesmeralda.acce_tbusuarios
MODIFY COLUMN Usua_Id INT AUTO_INCREMENT;

DELIMITER $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_Usuario_insertar`(
    IN Usua_Usuario VARCHAR(30),
    IN Usua_Contrase単a VARCHAR(255),
    IN Usua_Administrador TINYINT(1),
    IN Empl_Id INT,
    IN Role_Id INT,
    IN Usua_UsuarioCreacion INT,
    IN Usua_FechaCreacion DATETIME
)
BEGIN
START TRANSACTION;
    BEGIN
        INSERT INTO Acce_tbUsuarios (
            Usua_Usuario,
            Usua_Contrase単a,
            Usua_Administrador,
            Empl_Id,
            Role_Id,
            Usua_Estado,
            Usua_UsuarioCreacion,
            Usua_FechaCreacion
        ) VALUES (
            Usua_Usuario,
            SHA2(Usua_Contrase単a, 512),
            Usua_Administrador,
            Empl_Id,
            Role_Id,
            1,
            Usua_UsuarioCreacion,
            Usua_FechaCreacion
        );
        COMMIT;
        SELECT 1 AS Resultado;
    END;
END

DELIMITER ;


DELIMITER //
CREATE DEFINER=root@localhost PROCEDURE SP_Departamentos_Listar()
BEGIN
    SELECT 
        Depa_Codigo, 
        Depa_Departamento, 
        Depa_UsuarioCreacion, 
        Depa_FechaCreacion, 
        Depa_UsuarioModificacion,
        Depa_FechaModificacion
    FROM 
        Gral_tbDepartamentos;
END
//
DELIMITER ;



DELIMITER //
CREATE DEFINER=root@localhost PROCEDURE SP_Cargos_Listar()
BEGIN
    SELECT 
        Carg_Id, 
        Carg_Cargo, 
        Carg_UsuarioCreacion, 
        Carg_FechaCreacion, 
        Carg_UsuarioModificacion, 
        Carg_FechaModificacion, 
        Carg_Estado
    FROM 
        Gral_tbCargos
    WHERE 
        Carg_Estado = 1;
END
//
DELIMITER ;


DELIMITER //

CREATE PROCEDURE sp_Sucursales_listar()
BEGIN
    SELECT 
        Sucu_Id, 
        Sucu_Nombre, 
        s.Muni_Codigo, 
        m.Muni_Municipio,
        Sucu_UsuarioCreacion, 
        Sucu_FechaCreacion, 
        Sucu_UsuarioModificacion, 
        Sucu_FechaModificacion
    FROM 
        Gral_tbSucursales s 
        INNER JOIN Gral_tbMunicipios m ON s.Muni_Codigo = m.Muni_Codigo
    WHERE 
        Sucu_Estado = 1;
END //

DELIMITER ;

DELIMITER //

CREATE PROCEDURE sp_EstadosCiviles_listar()
BEGIN
    SELECT 
        Esta_Id, 
        Esta_EstadoCivil, 
        Esta_UsuarioCreacion, 
        Esta_FechaCreacion, 
        Esta_UsuarioModificacion, 
        Esta_FechaModificacion, 
        Esta_Estado
    FROM 
        Gral_tbEstadosCiviles
    WHERE 
        Esta_Estado = 1;
END //

DELIMITER ;

DELIMITER //

CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_Municipios_MostrarPorDepartamento`(
    IN p_Depa_Codigo VARCHAR(2)
)
BEGIN
    SELECT * FROM Gral_tbMunicipios
    WHERE Depa_Codigo = p_Depa_Codigo;
END //

DELIMITER ;

ALTER TABLE dbsistemaesmeralda.gral_tbempleados
MODIFY COLUMN Empl_Id INT AUTO_INCREMENT;

ALTER TABLE dbsistemaesmeralda.acce_tbusuarios
MODIFY COLUMN Usua_Id INT AUTO_INCREMENT;

DELIMITER //
CREATE DEFINER=root@localhost PROCEDURE SP_Empleados_Actualizar(
    IN p_Empl_Id INT,
    IN p_Empl_Nombre NVARCHAR(30),
    IN p_Empl_Apellido NVARCHAR(30),
    IN p_Empl_Sexo CHAR(1),
    IN p_Empl_FechaNac DATETIME,
    IN p_Empl_DNI VARCHAR(13),
    IN p_Muni_Codigo VARCHAR(4),
    IN p_Sucu_Id INT,
    IN p_Esta_Id INT,
    IN p_Carg_Id INT,
    IN p_Empl_Correo VARCHAR(200),
    IN p_Empl_UsuarioModificacion INT,
    IN p_Empl_FechaModificacion DATETIME
)
BEGIN
    DECLARE EXIT HANDLER FOR SQLEXCEPTION
    BEGIN
        ROLLBACK;
        SELECT 0 AS Resultado;
    END;

    START TRANSACTION;
    UPDATE Gral_tbempleados
    SET
        Empl_Nombre = p_Empl_Nombre,
        Empl_Apellido = p_Empl_Apellido,
        Empl_Sexo = p_Empl_Sexo,
        Empl_FechaNac = p_Empl_FechaNac,
        Empl_DNI = p_Empl_DNI,
        Muni_Codigo = p_Muni_Codigo,
        Sucu_Id = p_Sucu_Id,
        Esta_Id = p_Esta_Id,
        Carg_Id = p_Carg_Id,
        Empl_Correo = p_Empl_Correo,
        Empl_UsuarioModificacion = p_Empl_UsuarioModificacion,
        Empl_FechaModificacion = p_Empl_FechaModificacion
    WHERE
        Empl_Id = p_Empl_Id;

    COMMIT;
    SELECT 1 AS Resultado;
END
//
DELIMITER ;


DELIMITER //
CREATE DEFINER=root@localhost PROCEDURE SP_Empleados_eliminar(
    IN p_Empl_Id INT
)
BEGIN
    DECLARE EXIT HANDLER FOR SQLEXCEPTION
    BEGIN
        ROLLBACK;
        SELECT 0 AS Resultado;
    END;

    START TRANSACTION;
    UPDATE Gral_tbempleados
    SET Empl_Estado = 0
    WHERE Empl_Id = p_Empl_Id;

    COMMIT;
    SELECT 1 AS Resultado;
END
//
DELIMITER ;

DELIMITER //
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_Usuarios_Actualizar`(
    IN p_Usua_Id INT,
    IN p_Usua_Usuario VARCHAR(30),
    IN p_Usua_Administrador TINYINT(1),
    IN p_Empl_Id INT,
    IN p_Role_Id INT,
    IN p_Usua_UsuarioModificacion INT,
    IN p_Usua_FechaModificacion DATETIME
)
BEGIN
    DECLARE EXIT HANDLER FOR SQLEXCEPTION
    BEGIN
        ROLLBACK;
        SELECT 0 AS Resultado;
    END;

    START TRANSACTION;
    UPDATE acce_tbusuarios
    SET
        Usua_Usuario = p_Usua_Usuario,
        Usua_Administrador = p_Usua_Administrador,
        Empl_Id = p_Empl_Id,
        Role_Id = p_Role_Id,
        Usua_UsuarioModificacion = p_Usua_UsuarioModificacion,
        Usua_FechaModificacion = p_Usua_FechaModificacion
    WHERE
        Usua_Id = p_Usua_Id;

    COMMIT;
    SELECT 1 AS Resultado;
END
//
DELIMITER ;

DELIMITER //
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_Usuarios_Eliminar`(
    IN p_Usua_Id INT
)
BEGIN
    DECLARE EXIT HANDLER FOR SQLEXCEPTION
    BEGIN
        ROLLBACK;
        SELECT 0 AS Resultado;
    END;

    START TRANSACTION;
    UPDATE Acce_tbUsuarios
    SET Usua_Estado = 0
    WHERE Usua_Id = p_Usua_Id;

    COMMIT;
    SELECT 1 AS Resultado;
END


//
DELIMITER ;
DELIMITER //
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_Empleados_buscar`(
    IN Empl_Id INT
)
BEGIN
    SELECT 
        em.Empl_Id,
        em.Empl_Nombre,
        em.Empl_Apellido,
        em.Empl_Sexo,
        CASE Empl_Sexo WHEN 'F' THEN 'Femenino' ELSE 'Masculino' END Sexo,
        em.Empl_FechaNac,
        em.Muni_Codigo,
        em.Empl_DNI,
        em.Sucu_Id,
        su.Sucu_Nombre,
        mu.Muni_Municipio,
        em.Esta_Id,
        e.Esta_EstadoCivil,
        em.Carg_Id,
        c.Carg_Cargo,
        d.Depa_Codigo,
        d.Depa_Departamento,
        em.Empl_Correo,
        DATE_FORMAT(em.Empl_FechaCreacion, '%Y-%m-%d') AS FechaCreacion,
        DATE_FORMAT(em.Empl_FechaModificacion, '%Y-%m-%d') AS FechaModificacion,
        em.Empl_Estado,
        uCreacion.Usua_Usuario AS UsuarioCreacion,
        uModificador.Usua_Usuario AS UsuarioModificacion 
    FROM 
        Gral_tbempleados em 
    INNER JOIN 
        Gral_tbEstadosCiviles e ON em.Esta_Id = e.Esta_Id  
    INNER JOIN 
        Gral_tbCargos c ON em.Carg_Id = c.Carg_Id 
    INNER JOIN 
        Gral_tbMunicipios mu ON mu.Muni_Codigo = em.Muni_Codigo 
    LEFT JOIN 
        Acce_tbUsuarios uCreacion ON uCreacion.Usua_Id = em.Empl_UsuarioCreacion
    LEFT JOIN 
        Acce_tbUsuarios uModificador ON uModificador.Usua_Id = em.Empl_UsuarioModificacion
    LEFT JOIN 
        Gral_tbDepartamentos d ON d.Depa_Codigo = mu.Depa_Codigo
   LEFT JOIN  gral_tbsucursales su on su.sucu_Id = em.sucu_Id
    WHERE
        em.Empl_Id = Empl_Id;
END


//
DELIMITER ;

DELIMITER //
CREATE DEFINER=root@localhost PROCEDURE SP_Usuarios_Buscar(
    IN p_Usua_Id INT
)
BEGIN
    SELECT 
        u.Usua_Id,
        u.Usua_Usuario,
        u.Usua_Administrador,
        u.Empl_Id,
        CONCAT(em.Empl_Nombre, ' ', em.Empl_Apellido) Empleado,
        u.Role_Id,
        ro.Role_Rol,
        u.Usua_Estado,
        DATE_FORMAT(u.Usua_FechaCreacion, '%Y-%m-%d') AS FechaCreacion,
        DATE_FORMAT(u.Usua_FechaModificacion, '%Y-%m-%d') AS FechaModificacion,
        uCreacion.Usua_Usuario AS UsuarioCreacion,
        uModificador.Usua_Usuario AS UsuarioModificacion 
    FROM 
        Acce_tbUsuarios u
	LEFT JOIN gral_tbempleados em ON em.Empl_Id = u.Empl_Id
    LEFT JOIN acce_tbroles ro ON ro.Role_Id = u.Role_Id
    LEFT JOIN 
        Acce_tbUsuarios uCreacion ON uCreacion.Usua_Id = u.Usua_UsuarioCreacion
    LEFT JOIN 
        Acce_tbUsuarios uModificador ON uModificador.Usua_Id = u.Usua_UsuarioModificacion
    WHERE 
        u.Usua_Id = p_Usua_Id;
END
//
DELIMITER ;

DELIMITER //
CREATE DEFINER=root@localhost PROCEDURE SP_Roles_listar()
BEGIN
    SELECT r.Role_Id,r.Role_Rol
    FROM acce_tbroles r;
END
//
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_FacturaCompra_Buscar`(
in p_FaCE_Id int)
BEGIN
	SELECT
		fe.FaCE_Id as faCE_Id,
		fe.Prov_Id,
		faCD_Dif = 0,
		P.Prov_Proveedor as nombreProveedor,
		fe.Mepa_Id,
		M.Mepa_Metodo,
		fe.FaCE_fechafinalizacion,
		s.Sucu_Id as sucu_Id,
		s.Sucu_Nombre as sucu_Nombre
	FROM vent_tbFacturaCompraEncabezado fe LEFT JOIN acce_tbUsuarios U1
	ON fe.FeCE_UsuarioCreacion = U1.Usua_Id LEFT JOIN acce_tbUsuarios U2
	ON fe.FaCE_UsuarioModificacion = U2.Usua_Id LEFT JOIN gral_proveedores P
	ON P.Prov_Id = fe.Prov_Id left join gral_tbMetodosPago M
	ON M.Mepa_Id = fe.Mepa_Id left join gral_tbSucursales s
	on s.Sucu_Id = fe.Sucu_Id
	where FaCE_Id = p_FaCE_Id and FaCE_Etado = 1;
END 
 $$
DELIMITER ;

DELIMITER $$
create  procedure SP_FacturaCompra_Finalizar(
in p_FaCE_Id int,
IN p_FaCE_FechaFinal datetime
)
BEGIN
	START TRANSACTION;

		UPDATE vent_tbFacturaCompraEncabezado
		SET
		FaCE_Finalizada = 1,
		FaCE_fechafinalizacion = p_FaCE_FechaFinal
		where FaCE_Id = p_FaCE_Id;
         COMMIT;
    SELECT 1 AS Resultado;
END
 $$
DELIMITER ;

DELIMITER //

CREATE PROCEDURE SP_Maquillajes_listarAutoCompletado1()
BEGIN
    SELECT 
        MIN(M.Maqu_Id) AS Maqu_Id, 
        MIN(M.Maqu_Codigo) AS Maqu_Codigo,
        M.Maqu_Nombre AS Maqu_Nombre,
        MIN(M.Maqu_PrecioCompra) AS Maqu_PrecioCompra,
        MIN(M.Maqu_Stock) AS Maqu_Stock,
        MIN(M.Maqu_PrecioVenta) AS Venta,
        MIN(M.Maqu_PrecioMayor) AS Mayor,
        MIN(M.Maqu_Imagen) AS Maqu_Imagen,
        MIN(Mar.Marc_Marca) AS Marc_Marca,
        MIN(P.Prov_Proveedor) AS Prov_Proveedor
    FROM Vent_tbMaquillajes M
    LEFT JOIN Gral_tbMarcas Mar ON M.Marc_Id = Mar.Marc_Id
    LEFT JOIN Gral_tbProveedores P ON P.Prov_Id = M.Prov_Id
    WHERE M.Maqu_Estado = 1
    GROUP BY M.Maqu_Nombre;
END //

DELIMITER ;


DELIMITER //

CREATE PROCEDURE SP_Joyas_listarAutoCompletado1()
BEGIN
    SELECT 
        MIN(J.Joya_Id) AS Joya_Id,
        MIN(J.Joya_Codigo) AS Joya_Codigo,
        J.Joya_Nombre AS Joya_Nombre,
        MIN(J.Joya_PrecioCompra) AS Joya_PrecioCompra,
        MIN(J.Joya_PrecioVenta) AS Venta,
        MIN(J.Joya_Stock) AS Joya_Stock,
        MIN(J.Joya_PrecioMayor) AS Mayor,
        MIN(J.Joya_Imagen) AS Joya_Imagen,
        MIN(M.Mate_Material) AS Mate_Material,
        MIN(P.Prov_Proveedor) AS Prov_Proveedor,
        MIN(C.Cate_Categoria) AS Cate_Categoria
    FROM Vent_tbJoyas J
    LEFT JOIN Gral_tbProveedores P ON P.Prov_Id = J.Prov_Id
    LEFT JOIN Gral_tbMateriales M ON M.Mate_Id = J.Mate_Id
    LEFT JOIN Gral_tbCategorias C ON C.Cate_Id = J.Cate_Id
    WHERE J.Joya_Estado = 1
    GROUP BY J.Joya_Nombre;
END //

DELIMITER ;

DELIMITER //

CREATE PROCEDURE SP_Maquillajes_Buscarr(
   IN p_Maqu_Codigo VARCHAR(50)
)
BEGIN
    SELECT 
         MA.Maqu_Id,
         MA.Maqu_Codigo,
        MA.Maqu_Nombre,
        MA.Maqu_PrecioCompra,
        MA.Maqu_Stock,
        MA.Maqu_PrecioVenta,
        MA.Prov_Id,
        MA.Marc_Id,
        P.Prov_Proveedor,
        Mar.Marc_Marca,
        MA.Maqu_PrecioMayor,
        MA.Maqu_Imagen
    FROM 
        vent_tbmaquillajes MA
        LEFT JOIN gral_tbmarcas Mar ON MA.Marc_Id = Mar.Marc_Id
        LEFT JOIN gral_tbproveedores P ON P.Prov_Id = MA.Prov_Id
    WHERE 
        MA.Maqu_Codigo = Maqu_Codigo;
END //

DELIMITER ;

CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_Joyas_Buscarr`(
   IN p_Joya_Codigo VARCHAR(50)
)
BEGIN
    SELECT 
        J.Joya_Id,
        J.Joya_Codigo,
        J.Joya_Nombre,
        J.Joya_PrecioCompra,
        J.Joya_Stock,
        J.Joya_PrecioMayor,
        J.Joya_PrecioVenta,
        J.Joya_Imagen,
        P.Prov_Id,
        P.Prov_Proveedor,
        M.Mate_Id,
        M.Mate_Material,
        C.Cate_Id,
        C.Cate_Categoria
    FROM vent_tbjoyas J
    LEFT JOIN gral_tbproveedores P ON P.Prov_Id = J.Prov_Id
    LEFT JOIN gral_tbmateriales M ON M.Mate_Id = J.Mate_Id
    LEFT JOIN gral_tbcategorias C ON C.Cate_Id = J.Cate_Id
    WHERE J.Joya_Codigo = p_Joya_Codigo;
END

DELIMITER //

CREATE PROCEDURE Vent_SP_FacturaCompra_Actualizar(
    IN p_FaCE_Id INT,
    IN p_Prov_Id INT,
    IN p_Mepa_Id INT,
    IN p_FeCE_UsuarioModificacion INT,
    IN p_FaCE_FechaModificacion DATETIME
)
BEGIN
    DECLARE EXIT HANDLER FOR SQLEXCEPTION
    BEGIN
        -- Manejar errores aqu鱈
        SELECT 0;
    END;

    UPDATE Vent_tbFacturaCompraEncabezado
    SET
        Prov_Id = p_Prov_Id,
        Mepa_Id = p_Mepa_Id,
        FaCE_UsuarioModificacion = p_FeCE_UsuarioModificacion,
        FaCE_FechaModificacion = p_FaCE_FechaModificacion
    WHERE FaCE_Id = p_FaCE_Id;

    SELECT 1;
END //

DELIMITER ;


DELIMITER //
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_FacturaCompra_Insertar`(
    IN p_Prov_Id INT,
    IN p_Mepa_Id INT,
    IN p_Sucu_Id INT,
    IN p_FeCE_UsuarioCreacion INT,
    IN p_FaCE_FechaCreacion DATETIME,
    IN p_FeCE_UsuarioModificacion INT,
    IN p_FaCE_FechaModificacion DATETIME,
    IN p_FaCe_Id INT,
    OUT p_ID INT
)
BEGIN
    DECLARE EXIT HANDLER FOR SQLEXCEPTION
    BEGIN
        ROLLBACK;
        SET p_ID = NULL;
    END;

    START TRANSACTION;

    IF p_FaCe_Id = 0 THEN
        -- Insertar un nuevo encabezado de factura de compra
        INSERT INTO vent_tbfacturacompraencabezado 
            (Prov_Id, Mepa_Id, FeCE_UsuarioCreacion, FaCE_FechaCreacion, FaCE_Finalizada, Sucu_Id)
        VALUES 
            (p_Prov_Id, p_Mepa_Id, p_FeCE_UsuarioCreacion, p_FaCE_FechaCreacion, 0, p_Sucu_Id);

        SET p_ID = LAST_INSERT_ID();
    ELSE
        -- Actualizar el encabezado de factura de compra existente
        UPDATE vent_tbfacturacompraencabezado
        SET 
            Prov_Id = p_Prov_Id,
            Mepa_Id = p_Mepa_Id,
            FeCE_UsuarioCreacion = p_FeCE_UsuarioModificacion,
            FaCE_FechaCreacion = p_FaCE_FechaModificacion,
            FaCE_Finalizada = 0,
            Sucu_Id = p_Sucu_Id
        WHERE 
            FaCE_Id = p_FaCe_Id;

        SET p_ID = p_FaCe_Id;
    END IF;

    COMMIT;
    SELECT p_ID;
END
 //

DELIMITER ;

DELIMITER //

CREATE PROCEDURE SP_FacturaCompraDetalle_Listar(IN p_FaCE_Id INT)
BEGIN
    -- Crear la tabla temporal y consolidar datos de joyas
    CREATE TEMPORARY TABLE IF NOT EXISTS Consolidated AS
    SELECT
        fd.FaCD_Dif,
        MAX(fd.FaCD_Id) AS FaCD_Id,
        MAX(j.Joya_Codigo) AS Prod_Id,
        j.Joya_Nombre AS Prod_Nombre,
        SUM(fd.FaCD_Cantidad) AS Total_Cantidad,
        'Joyas' AS Categoria,
        MAX(j.Joya_PrecioCompra) AS Prod_Precio,
        MAX(j.Joya_PrecioVenta) AS PrecioVenta,
        MAX(j.Joya_PrecioMayor) AS PrecioMayorista
    FROM
        vent_tbfacturacompradetalle fd
    JOIN
        vent_tbjoyas j ON fd.Prod_Codigo = j.Joya_Codigo
    WHERE
        fd.FaCD_Dif = 1
        AND fd.FaCE_Id = p_FaCE_Id
    GROUP BY
        fd.FaCD_Dif, j.Joya_Nombre;

    -- Insertar datos de maquillajes en la tabla temporal
    INSERT INTO Consolidated
    SELECT
        fd.FaCD_Dif,
        MAX(fd.FaCD_Id) AS FaCD_Id,
        MAX(m.Maqu_Codigo) AS Prod_Id,
        m.Maqu_Nombre AS Prod_Nombre,
        SUM(fd.FaCD_Cantidad) AS Total_Cantidad,
        'Maquillajes' AS Categoria,
        MAX(m.Maqu_PrecioCompra) AS Prod_Precio,
        MAX(m.Maqu_PrecioVenta) AS PrecioVenta,
        MAX(m.Maqu_PrecioMayor) AS PrecioMayorista
    FROM
        vent_tbfacturacompradetalle fd
    JOIN
        vent_tbmaquillajes m ON fd.Prod_Codigo = m.Maqu_Codigo
    WHERE
        fd.FaCD_Dif = 0
        AND fd.FaCE_Id = p_FaCE_Id
    GROUP BY
        fd.FaCD_Dif, m.Maqu_Nombre;

    -- Seleccionar los datos consolidados
    SELECT
        FaCD_Id AS faCD_Id,
        Prod_Id,
        Prod_Nombre AS Producto,
        Total_Cantidad AS Cantidad,
        Prod_Precio AS Precio_Venta,
        PrecioVenta,
        PrecioMayorista,
        (Total_Cantidad * Prod_Precio) AS Total,
        Categoria
    FROM
        Consolidated;

    -- Eliminar la tabla temporal
    DROP TEMPORARY TABLE Consolidated;

END //

DELIMITER ;

CREATE   procedure SP_FacturaCompraDetalle_Buscar()
BEGIN 
	select * from vent_tbfacturacompradetalle;
END

DELIMITER //

CREATE PROCEDURE SP_FacturaCompraDetalle_Eliminar(
    IN p_ID INT
)
BEGIN
    DECLARE p_Cantidad INT;
    DECLARE p_dife TINYINT(1);
    DECLARE p_producto VARCHAR(100);
    DECLARE p_menor INT;
    DECLARE p_menor1 INT;
    DECLARE p_sucu INT;
    DECLARE p_encabe INT;
    DECLARE p_provee INT;
    DECLARE p_nombre VARCHAR(255);

    DECLARE EXIT HANDLER FOR SQLEXCEPTION
    BEGIN
        SELECT 0;
    END;

    -- Obtener datos de detalle de factura
    SELECT 
        FaCD_Dif,
        Prod_Codigo,
        FaCE_Id
    INTO 
        p_dife,
        p_producto,
        p_encabe
    FROM vent_tbfacturacompradetalle
    WHERE FaCD_Id = p_ID;

    -- Obtener cantidad total del producto en la factura
    SELECT 
        SUM(FaCD_Cantidad)
    INTO 
        p_Cantidad
    FROM vent_tbfacturacompradetalle
    WHERE FaCE_Id = p_encabe AND Prod_Codigo = p_producto;

    -- Obtener informaci坦n de encabezado
    SELECT 
        Sucu_Id,
        Prov_Id
    INTO 
        p_sucu,
        p_provee
    FROM vent_tbfacturacompraencabezado
    WHERE FaCE_Id = p_encabe;

    -- Si es una joya
    IF p_dife = 1 THEN
        -- Obtener nombre de la joya
        SELECT Joya_Nombre
        INTO p_nombre
        FROM vent_tbjoyas
        WHERE Joya_Codigo = p_producto AND Prov_Id = p_provee;

        -- Actualizar stock de la joya
        UPDATE vent_tbjoyas
        SET Joya_Stock = Joya_Stock - p_Cantidad
        WHERE Joya_Nombre = p_nombre AND Prov_Id = p_provee;

        -- Actualizar stock en la tabla de productos por sucursales
        UPDATE gral_tbproductosporsucurales
        SET Prsx_Stock = Prsx_Stock - p_Cantidad
        WHERE Prxs_Dif = p_dife AND Sucu_Id = p_sucu AND Prod_Codigo = p_producto;

        -- Verificar si el stock es negativo y ajustarlo
        SELECT Joya_Stock
        INTO p_menor
        FROM vent_tbjoyas
        WHERE Joya_Codigo = p_producto;

        SELECT Prsx_Stock
        INTO p_menor1
        FROM gral_tbproductosporsucurales
        WHERE Prxs_Dif = p_dife AND Sucu_Id = p_sucu AND Prod_Codigo = p_producto;

        IF p_menor < 0 THEN
            UPDATE vent_tbjoyas
            SET Joya_Stock = 0
            WHERE Joya_Codigo = p_producto;
        END IF;

        IF p_menor1 < 0 THEN
            UPDATE gral_tbproductosporsucurales
            SET Prsx_Stock = 0
            WHERE Prxs_Dif = p_dife AND Sucu_Id = p_sucu AND Prod_Codigo = p_producto;
        END IF;

        -- Eliminar detalle de factura
        DELETE FROM vent_tbfacturacompradetalle
        WHERE FaCE_Id = p_encabe AND Prod_Codigo = p_producto;

    -- Si es maquillaje
    ELSE
        -- Actualizar stock de maquillaje
        UPDATE vent_tbmaquillajes
        SET Maqu_Stock = Maqu_Stock - p_Cantidad
        WHERE Maqu_Codigo = p_producto;

        -- Actualizar stock en la tabla de productos por sucursales
        UPDATE gral_tbproductosporsucurales
        SET Prsx_Stock = Prsx_Stock - p_Cantidad
        WHERE Prxs_Dif = p_dife AND Sucu_Id = p_sucu AND Prod_Codigo = p_producto;

        -- Verificar si el stock es negativo y ajustarlo
        SELECT Maqu_Stock
        INTO p_menor
        FROM vent_tbmaquillajes
        WHERE Maqu_Codigo = p_producto;

        SELECT Prsx_Stock
        INTO p_menor1
        FROM gral_tbproductosporsucurales
        WHERE Prxs_Dif = p_dife AND Sucu_Id = p_sucu AND Prod_Codigo = p_producto;

        IF p_menor < 0 THEN
            UPDATE vent_tbmaquillajes
            SET Maqu_Stock = 0
            WHERE Maqu_Codigo = p_producto;
        END IF;

        IF p_menor1 < 0 THEN
            UPDATE gral_tbproductosporsucurales
            SET Prsx_Stock = 0
            WHERE Prxs_Dif = p_dife AND Sucu_Id = p_sucu AND Prod_Codigo = p_producto;
        END IF;

        -- Eliminar detalle de factura
        DELETE FROM vent_tbfacturacompradetalle
        WHERE FaCE_Id = p_encabe AND Prod_Codigo = p_producto;
    END IF;

    SELECT 1;
END //

DELIMITER ;
DELIMITER //
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_FacturaCompraDetalle_Insertar`(
    IN p_FaCE_Id INT,
    IN p_FaCD_Dif TINYINT(1),
    IN p_NombreProducto VARCHAR(70),
    IN p_FaCD_Cantidad INT,
    IN p_PrecioCompra DECIMAL(8,2),
    IN p_PrecioVenta DECIMAL(8,2),
    IN p_PrecioMayor DECIMAL(8,2)
)
BEGIN
    DECLARE p_proid VARCHAR(100);
    DECLARE p_idsalida VARCHAR(100);
    DECLARE p_prove INT;
    DECLARE p_stockActual INT;
    DECLARE p_usuariocreacion INT;
    DECLARE p_fechacreacion DATETIME;
    DECLARE p_sucursal INT;

    -- Declaraciones adicionales
    DECLARE nombre VARCHAR(60);
    DECLARE precio_Venta DECIMAL(18,2);
    DECLARE precio_Mayor DECIMAL(18,2);
    DECLARE imagen VARCHAR(255);
    DECLARE mateId INT;
    DECLARE cateId INT;
    DECLARE nombreM VARCHAR(60);
    DECLARE precioVentaM DECIMAL(18,2);
    DECLARE precioMayorM DECIMAL(18,2);
    DECLARE imagenM VARCHAR(255);
    DECLARE marcIdM INT;

    DECLARE EXIT HANDLER FOR SQLEXCEPTION
    BEGIN
        SELECT 0;
    END;

    SELECT 
        Prov_Id,
        FeCE_UsuarioCreacion,
        FaCE_FechaCreacion,
        Sucu_Id
    INTO
        p_prove,
        p_usuariocreacion,
        p_fechacreacion,
        p_sucursal
    FROM vent_tbfacturacompraencabezado 
    WHERE FaCE_Id = p_FaCE_Id;

    -- Verificaci坦n y actualizaci坦n/inserci坦n en la tabla de joyas
    IF p_FaCD_Dif = 1 THEN
        IF EXISTS (SELECT 1 FROM vent_tbjoyas WHERE Joya_Codigo = p_NombreProducto OR Joya_Nombre = p_NombreProducto) THEN
            SELECT Joya_Codigo INTO p_proid FROM vent_tbjoyas
            WHERE Joya_Codigo = p_NombreProducto OR Joya_Nombre = p_NombreProducto;

            UPDATE vent_tbjoyas
            SET Joya_Stock = Joya_Stock + p_FaCD_Cantidad,
                Joya_PrecioCompra = p_PrecioCompra,
                Joya_PrecioVenta = p_PrecioVenta,
                Joya_PrecioMayor = p_PrecioMayor
            WHERE Joya_Codigo = p_proid;

            IF EXISTS (SELECT 1 FROM gral_tbproductosporsucurales WHERE Sucu_Id = p_sucursal AND Prod_Codigo = p_proid AND Prxs_Dif = p_FaCD_Dif) THEN
                UPDATE gral_tbproductosporsucurales
                SET Prxs_Dif = p_FaCD_Dif,
                    Prsx_Stock = Prsx_Stock + p_FaCD_Cantidad
                WHERE Sucu_Id = p_sucursal AND Prod_Codigo = p_proid AND Prxs_Dif = p_FaCD_Dif;
            ELSE
                INSERT INTO gral_tbproductosporsucurales (Prxs_Dif, Prod_Codigo, Prsx_Stock, Sucu_Id)
                VALUES (p_FaCD_Dif, p_proid, p_FaCD_Cantidad, p_sucursal);
            END IF;

            IF EXISTS (SELECT 1 FROM vent_tbfacturacompradetalle WHERE FaCE_Id = p_FaCE_Id AND FaCD_Dif = p_FaCD_Dif AND Prod_Codigo = p_proid) THEN
                UPDATE vent_tbfacturacompradetalle
                SET FaCD_Cantidad = p_FaCD_Cantidad
                WHERE FaCE_Id = p_FaCE_Id AND FaCD_Dif = p_FaCD_Dif AND Prod_Codigo = p_proid;
            ELSE
                INSERT INTO vent_tbfacturacompradetalle (FaCE_Id, FaCD_Dif, Prod_Codigo, FaCD_Cantidad)
                VALUES (p_FaCE_Id, p_FaCD_Dif, p_proid, p_FaCD_Cantidad);
            END IF;
        ELSE
            IF NOT EXISTS (SELECT 1 FROM vent_tbmaquillajes WHERE Maqu_Codigo = p_NombreProducto OR Maqu_Nombre = p_NombreProducto) THEN
                INSERT INTO vent_tbjoyas (Joya_Nombre, Joya_PrecioCompra, Joya_PrecioVenta, Joya_PrecioMayor, Joya_Imagen, Prov_Id, Mate_Id, Cate_Id, Joya_UsuarioCreacion, Joya_FechaCreacion, Joya_Estado, Joya_Stock)
                VALUES (p_NombreProducto, p_PrecioCompra, p_PrecioVenta, p_PrecioMayor, 'NA', p_prove, 6, 8, p_usuariocreacion, p_fechacreacion, 1, p_FaCD_Cantidad);

                SET p_idsalida = LAST_INSERT_ID();

                INSERT INTO gral_tbproductosporsucurales (Prxs_Dif, Prod_Codigo, Prsx_Stock, Sucu_Id)
                VALUES (p_FaCD_Dif, p_idsalida, p_FaCD_Cantidad, p_sucursal);

                INSERT INTO vent_tbfacturacompradetalle (FaCE_Id, FaCD_Dif, Prod_Codigo, FaCD_Cantidad)
                VALUES (p_FaCE_Id, p_FaCD_Dif, p_idsalida, p_FaCD_Cantidad);
            END IF;
        END IF;

    -- Verificaci坦n y actualizaci坦n/inserci坦n en la tabla de maquillajes
    ELSE
        IF EXISTS (SELECT 1 FROM vent_tbmaquillajes WHERE Maqu_Codigo = p_NombreProducto OR Maqu_Nombre = p_NombreProducto) THEN
            SELECT Maqu_Codigo INTO p_proid FROM vent_tbmaquillajes
            WHERE Maqu_Codigo = p_NombreProducto OR Maqu_Nombre = p_NombreProducto;

            UPDATE vent_tbmaquillajes
            SET Maqu_Stock = Maqu_Stock + p_FaCD_Cantidad,
                Maqu_PrecioCompra = p_PrecioCompra,
                Maqu_PrecioVenta = p_PrecioVenta,
                Maqu_PrecioMayor = p_PrecioMayor
            WHERE Maqu_Codigo = p_proid;

            IF EXISTS (SELECT 1 FROM gral_tbproductosporsucurales WHERE Sucu_Id = p_sucursal AND Prod_Codigo = p_proid AND Prxs_Dif = p_FaCD_Dif) THEN
                UPDATE gral_tbproductosporsucurales
                SET Prxs_Dif = p_FaCD_Dif,
                    Prsx_Stock = Prsx_Stock + p_FaCD_Cantidad
                WHERE Sucu_Id = p_sucursal AND Prod_Codigo = p_proid AND Prxs_Dif = p_FaCD_Dif;
            ELSE
                INSERT INTO gral_tbproductosporsucurales (Prxs_Dif, Prod_Codigo, Prsx_Stock, Sucu_Id)
                VALUES (p_FaCD_Dif, p_proid, p_FaCD_Cantidad, p_sucursal);
            END IF;

            IF EXISTS (SELECT 1 FROM vent_tbfacturacompradetalle WHERE FaCE_Id = p_FaCE_Id AND FaCD_Dif = p_FaCD_Dif AND Prod_Codigo = p_proid) THEN
                UPDATE vent_tbfacturacompradetalle
                SET FaCD_Cantidad = p_FaCD_Cantidad
                WHERE FaCE_Id = p_FaCE_Id AND FaCD_Dif = p_FaCD_Dif AND Prod_Codigo = p_proid;
            ELSE
                INSERT INTO vent_tbfacturacompradetalle (FaCE_Id, FaCD_Dif, Prod_Codigo, FaCD_Cantidad)
                VALUES (p_FaCE_Id, p_FaCD_Dif, p_proid, p_FaCD_Cantidad);
            END IF;
        ELSE
            IF NOT EXISTS (SELECT 1 FROM vent_tbjoyas WHERE Joya_Codigo = p_NombreProducto OR Joya_Nombre = p_NombreProducto) THEN
                INSERT INTO vent_tbmaquillajes (Maqu_Nombre, Maqu_PrecioCompra, Maqu_PrecioVenta, Maqu_PrecioMayor, Maqu_Imagen, Prov_Id, Marc_Id, Maqu_UsuarioCreacion, Maqu_FechaCreacion, Maqu_Estado, Maqu_Stock)
                VALUES (p_NombreProducto, p_PrecioCompra, p_PrecioVenta, p_PrecioMayor, 'NA', p_prove, 8, p_usuariocreacion, p_fechacreacion, 1, p_FaCD_Cantidad);

                SET p_idsalida = LAST_INSERT_ID();

                INSERT INTO gral_tbproductosporsucurales (Prxs_Dif, Prod_Codigo, Prsx_Stock, Sucu_Id)
                VALUES (p_FaCD_Dif, p_idsalida, p_FaCD_Cantidad, p_sucursal);

                INSERT INTO vent_tbfacturacompradetalle (FaCE_Id, FaCD_Dif, Prod_Codigo, FaCD_Cantidad)
                VALUES (p_FaCE_Id, p_FaCD_Dif, p_idsalida, p_FaCD_Cantidad);
            END IF;
        END IF;
    END IF;

    SELECT 1;
END
//

DELIMITER ;


DELIMITER //

CREATE PROCEDURE SP_FacturaCompra_Actualizar(
    IN p_FaCE_Id INT,
    IN p_Prov_Id INT,
    IN p_Mepa_Id INT,
    IN p_FeCE_UsuarioModificacion INT,
    IN p_FaCE_FechaModificacion DATETIME
)
BEGIN
    DECLARE EXIT HANDLER FOR SQLEXCEPTION
    BEGIN
        SELECT 0;
    END;

    -- Actualizar encabezado de factura de compra
    UPDATE vent_tbfacturacompraencabezado 
    SET
        Prov_Id = p_Prov_Id,
        Mepa_Id = p_Mepa_Id,
        FaCE_UsuarioModificacion = p_FeCE_UsuarioModificacion,
        FaCE_FechaModificacion = p_FaCE_FechaModificacion
    WHERE FaCE_Id = p_FaCE_Id;

    SELECT 1;
END //

DELIMITER ;

DELIMITER //

CREATE PROCEDURE SP_FacturaCompra_Buscar(
    IN p_id INT
)
BEGIN
    -- Consulta para buscar la factura de compra
    SELECT
        fe.FaCE_Id AS faCE_Id,
        fe.Prov_Id,
        0 AS faCD_Dif,
        P.Prov_Proveedor AS nombreProveedor,
        fe.Mepa_Id,
        M.Mepa_Metodo,
        fe.FaCE_fechafinalizacion,
        s.Sucu_Id AS sucu_Id,
        s.Sucu_Nombre AS sucu_Nombre
    FROM vent_tbfacturacompraencabezado fe
    LEFT JOIN acce_tbusuarios U1 ON fe.FeCE_UsuarioCreacion = U1.Usua_Id
    LEFT JOIN acce_tbusuarios U2 ON fe.FaCE_UsuarioModificacion = U2.Usua_Id
    LEFT JOIN gral_tbproveedores P ON P.Prov_Id = fe.Prov_Id
    LEFT JOIN gral_tbmetodospago M ON M.Mepa_Id = fe.Mepa_Id
    LEFT JOIN gral_tbsucursales s ON s.Sucu_Id = fe.Sucu_Id
    WHERE fe.FaCE_Id = p_id AND fe.FaCE_Etado = 1;
END //

DELIMITER ;

DELIMITER //

CREATE PROCEDURE SP_FacturaCompra_Detalle(
    IN p_id INT
)
BEGIN
    -- Consulta para obtener el detalle de la factura de compra
    SELECT
        fe.FaCE_Id AS faCE_Id,
        fe.Prov_Id,
        P.Prov_Proveedor AS nombreProveedor,
        fe.Mepa_Id,
        M.Mepa_Metodo 
    FROM vent_tbfacturacompraencabezado fe
    LEFT JOIN acce_tbusuarios U1 ON fe.FeCE_UsuarioCreacion = U1.Usua_Id
    LEFT JOIN acce_tbusuarios U2 ON fe.FaCE_UsuarioModificacion = U2.Usua_Id
    LEFT JOIN gral_tbproveedores P ON P.Prov_Id = fe.Prov_Id
    LEFT JOIN gral_tbmetodospago M ON M.Mepa_Id = fe.Mepa_Id
    WHERE fe.FaCE_Id = p_id AND fe.FaCE_Etado = 1;
END //

DELIMITER ;

DELIMITER //

CREATE PROCEDURE SP_FacturaCompra_Eliminar(
    IN p_ID INT
)
BEGIN
    -- Actualizar el estado de la factura de compra a 0 (eliminado)
    UPDATE vent_tbfacturacompraencabezado
    SET
        FaCE_Etado = 0
    WHERE FaCE_Id = p_ID;
END //

DELIMITER ;

DELIMITER //

CREATE PROCEDURE SP_FacturaCompra_Finalizar(
    IN p_FaCE_Id INT,
    IN p_FaCE_FechaFinal DATETIME
)
BEGIN
    DECLARE EXIT HANDLER FOR SQLEXCEPTION
    BEGIN
        SELECT 0;
    END;

    -- Actualizar el estado de la factura de compra a finalizada
    UPDATE vent_tbfacturacompraencabezado 
    SET
        FaCE_Finalizada = 1,
        FaCE_fechafinalizacion = p_FaCE_FechaFinal
    WHERE FaCE_Id = p_FaCE_Id;

    SELECT 1;
END //

DELIMITER ;
DELIMITER //
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_FacturaCompra_Insertar`(
    IN p_Prov_Id INT,
    IN p_Mepa_Id INT,
    IN p_Sucu_Id INT,
    IN p_FeCE_UsuarioCreacion INT,
    IN p_FaCE_FechaCreacion DATETIME,
    IN p_FeCE_UsuarioModificacion INT,
    IN p_FaCE_FechaModificacion DATETIME,
    IN p_FaCe_Id INT,
    OUT p_ID INT
)
BEGIN
    DECLARE EXIT HANDLER FOR SQLEXCEPTION
    BEGIN
        SET p_ID = -1;
        ROLLBACK;
    END;

    START TRANSACTION;

    IF p_FaCe_Id = 0 THEN
        -- Insertar un nuevo encabezado de factura de compra
        INSERT INTO vent_tbfacturacompraencabezado 
            (Prov_Id, Mepa_Id, FeCE_UsuarioCreacion, FaCE_FechaCreacion, FaCE_Finalizada, Sucu_Id)
        VALUES 
            (p_Prov_Id, p_Mepa_Id, p_FeCE_UsuarioCreacion, p_FaCE_FechaCreacion, 0, p_Sucu_Id);

        SET p_ID = LAST_INSERT_ID();
    ELSE
        -- Actualizar el encabezado de factura de compra existente
        UPDATE vent_tbfacturacompraencabezado
        SET 
            Prov_Id = p_Prov_Id,
            Mepa_Id = p_Mepa_Id,
            FeCE_UsuarioCreacion = p_FeCE_UsuarioModificacion,
            FaCE_FechaCreacion = p_FaCE_FechaModificacion,
            FaCE_Finalizada = 0,
            Sucu_Id = p_Sucu_Id
        WHERE 
            FaCE_Id = p_FaCe_Id;

        SET p_ID = p_FaCe_Id;
    END IF;

    COMMIT;

    SELECT p_ID;
END
//

DELIMITER ;

DELIMITER //
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_ObtenerFacturaCompraDetalleId`(
    IN p_FaCE_Id INT,
    IN p_Prod_Codigo VARCHAR(100),
    IN p_FaCD_Dif TINYINT(1)
)
BEGIN
    SELECT FaCD_Id
    FROM vent_tbfacturacompradetalle
    WHERE FaCE_Id = p_FaCE_Id
    AND Prod_Codigo = p_Prod_Codigo
    AND FaCD_Dif = p_FaCD_Dif
    LIMIT 1;
END;

//

DELIMITER ;




----------------------------------------------------------------------------------------
CREATE VIEW VW_VentasMayoristas AS
WITH Pricing AS (
    SELECT
        fd.FaxD_Dif,
        fd.Prod_Codigo,
        fd.Fact_Id,
        cl.Clie_esMayorista,
        CASE WHEN fd.FaxD_Dif = 1 THEN j.Joya_Nombre ELSE m.Maqu_Nombre END AS Prod_Nombre,
        fd.FaxD_Cantidad,
        CASE WHEN fd.FaxD_Dif = 1 THEN 'Joyas' ELSE 'Maquillajes' END AS Categoria,
        CASE 
            WHEN fd.FaxD_Cantidad > 5 AND fd.FaxD_Dif = 1 AND j.Joya_PrecioMayor IS NOT NULL THEN j.Joya_PrecioMayor
            WHEN fd.FaxD_Cantidad <= 5 AND fd.FaxD_Dif = 1 AND j.Joya_PrecioVenta IS NOT NULL THEN j.Joya_PrecioVenta
            WHEN fd.FaxD_Cantidad > 5 AND fd.FaxD_Dif = 2 AND m.Maqu_PrecioMayor IS NOT NULL THEN m.Maqu_PrecioMayor
            ELSE m.Maqu_PrecioVenta
        END AS Price,
        f.Fact_FechaFinalizado
    FROM
        Vent_tbFacturaDetalles AS fd
    INNER JOIN
        Vent_tbFactura AS f ON fd.Fact_Id = f.Fact_Id
	INNER JOIN gral_tbclientes as cl on f.Clie_Id = cl.Clie_Id
    LEFT JOIN
        Vent_tbJoyas AS j ON fd.Prod_Codigo = j.Joya_Codigo AND fd.FaxD_Dif = 1
    LEFT JOIN
        Vent_tbMaquillajes AS m ON fd.Prod_Codigo = m.Maqu_Codigo AND fd.FaxD_Dif = 2
    WHERE
        f.Fact_Finalizado = 0
),
Consolidated AS (
    SELECT
        Fact_Id,
        Clie_esMayorista,
        Prod_Nombre,
        Categoria,
        SUM(FaxD_Cantidad) AS Total_Cantidad,
        MAX(Price) AS Prod_Precio,
        YEAR(Fact_FechaFinalizado) AS A単o,
        MONTH(Fact_FechaFinalizado) AS Mes,
        DATE_FORMAT(Fact_FechaFinalizado, '%Y-%m-%d') AS FechaFinalizado
    FROM
        Pricing
    GROUP BY
        Fact_Id, Prod_Nombre, Categoria, A単o, Mes, FechaFinalizado
)
SELECT
    Fact_Id,
    Prod_Nombre AS Producto,
    Total_Cantidad AS Cantidad,
    Prod_Precio AS Precio_Unitario,
    Total_Cantidad * Prod_Precio AS Total,
    Clie_esMayorista,
    Categoria,
    A単o,
    FechaFinalizado AS Fact_FechaFinalizado
FROM
    Consolidated;


CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_ReporteVentasMayoristas`(
    IN FechaInicio DATE,
    IN FechaFinal DATE
)
BEGIN
    SELECT * 
    FROM VW_VentasMayoristas
    WHERE Fact_FechaFinalizado >= FechaInicio 
      AND Fact_FechaFinalizado <= FechaFinal 
      AND (Clie_esMayorista = 1 OR Cantidad > 5);
END;


CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_ReporteVentaspPorPago`(
    IN Mepa_Id INT,
    IN FechaInicio DATE,
    IN FechaFinal DATE
)
BEGIN
    IF Mepa_Id = 0 THEN
        SELECT 
            V.Fact_Id,
            SUM(V.Total) * 1.15 AS Total,
            M.Mepa_Metodo,
            V.Fact_FechaFinalizado
        FROM VW_VentasMayoristas V
        INNER JOIN Vent_tbFactura F ON F.Fact_Id = V.Fact_Id
        INNER JOIN Gral_tbMetodosPago M ON M.Mepa_Id = F.Mepa_Id
        WHERE V.Fact_FechaFinalizado >= FechaInicio 
          AND V.Fact_FechaFinalizado <= FechaFinal
        GROUP BY V.Fact_Id, M.Mepa_Metodo, V.Fact_FechaFinalizado;
    ELSE
        SELECT 
            V.Fact_Id,
            SUM(V.Total) * 1.15 AS Total,
            M.Mepa_Metodo,
            V.Fact_FechaFinalizado
        FROM VW_VentasMayoristas V
        INNER JOIN Vent_tbFactura F ON F.Fact_Id = V.Fact_Id
        INNER JOIN Gral_tbMetodosPago M ON M.Mepa_Id = F.Mepa_Id
        WHERE M.Mepa_Id = Mepa_Id
          AND V.Fact_FechaFinalizado >= FechaInicio 
          AND V.Fact_FechaFinalizado <= FechaFinal
        GROUP BY V.Fact_Id, M.Mepa_Metodo, V.Fact_FechaFinalizado;
    END IF;
END

CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_MetodosPago_listar`()
BEGIN
  select * from gral_tbmetodospago;
END