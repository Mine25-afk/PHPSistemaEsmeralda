
-------------------------------------------------------------------

ALTER TABLE acce_tbpantallas
ADD COLUMN Pant_Identificador Varchar(50) ;

CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_Reporte_ControlStock`(
    IN TipoProducto INT,
    IN Sucu_Id INT
)
BEGIN
    -- Desactivar el comportamiento de no contar filas afectadas
    SET SESSION sql_mode = '';

    IF TipoProducto = 2 AND Sucu_Id = 0 THEN
        SELECT
            CASE 
                WHEN j.Joya_Nombre IS NOT NULL THEN j.Joya_Nombre
                ELSE m.Maqu_Nombre
            END AS Producto,
            SUM(p.Prsx_Stock) AS Stock,
            CASE 
                WHEN j.Joya_Nombre IS NOT NULL THEN 'Joya'
                ELSE 'Maquillaje'
            END AS Categoria
        FROM Gral_tbProductosPorSucurales p
        LEFT JOIN Vent_tbJoyas j ON p.Prod_Id = j.Joya_Id AND p.Prxs_Dif = 1
        LEFT JOIN Vent_tbMaquillajes m ON p.Prod_Id = m.Maqu_Id AND p.Prxs_Dif = 0
        WHERE (j.Joya_Estado = 1 OR m.Maqu_Estado = 1)
        GROUP BY Producto, Categoria;

    ELSEIF TipoProducto = 1 AND Sucu_Id = 0 THEN
        SELECT
            j.Joya_Nombre AS Producto,
            SUM(p.Prsx_Stock) AS Stock,  
            'Joya' AS Categoria
        FROM Gral_tbProductosPorSucurales p
        LEFT JOIN Vent_tbJoyas j ON p.Prod_Id = j.Joya_Id AND p.Prxs_Dif = 1
        WHERE j.Joya_Estado = 1
        AND p.Prxs_Dif = 1
        GROUP BY j.Joya_Nombre;

    ELSEIF TipoProducto = 0 AND Sucu_Id = 0 THEN
        SELECT
            m.Maqu_Nombre AS Producto,
            SUM(p.Prsx_Stock) AS Stock,  
            'Maquillaje' AS Categoria
        FROM Gral_tbProductosPorSucurales p
        LEFT JOIN Vent_tbMaquillajes m ON p.Prod_Id = m.Maqu_Id AND p.Prxs_Dif = 0
        WHERE m.Maqu_Estado = 1
        AND p.Prxs_Dif = 0
        GROUP BY m.Maqu_Nombre;

    ELSEIF TipoProducto = 1 THEN
        SELECT
            j.Joya_Nombre AS Producto,
            SUM(p.Prsx_Stock) AS Stock,  
            'Joya' AS Categoria
        FROM Gral_tbProductosPorSucurales p
        LEFT JOIN Vent_tbJoyas j ON p.Prod_Id = j.Joya_Id AND p.Prxs_Dif = 1
        WHERE j.Joya_Estado = 1
        AND p.Prxs_Dif = 1
        AND (@Sucu_Id = 2 OR p.Sucu_Id = Sucu_Id)
        GROUP BY j.Joya_Nombre;

    ELSEIF TipoProducto = 0 THEN
        SELECT
            m.Maqu_Nombre AS Producto,
            SUM(p.Prsx_Stock) AS Stock,  
            'Maquillaje' AS Categoria
        FROM Gral_tbProductosPorSucurales p
        LEFT JOIN Vent_tbMaquillajes m ON p.Prod_Id = m.Maqu_Id AND p.Prxs_Dif = 0
        WHERE m.Maqu_Estado = 1
        AND p.Prxs_Dif = 0
        AND (@Sucu_Id = 2 OR p.Sucu_Id = Sucu_Id)
        GROUP BY m.Maqu_Nombre;

    ELSEIF TipoProducto = 2 THEN
        SELECT
            CASE 
                WHEN j.Joya_Nombre IS NOT NULL THEN j.Joya_Nombre
                ELSE m.Maqu_Nombre
            END AS Producto,
            SUM(p.Prsx_Stock) AS Stock,
            CASE 
                WHEN j.Joya_Nombre IS NOT NULL THEN 'Joya'
                ELSE 'Maquillaje'
            END AS Categoria
        FROM Gral_tbProductosPorSucurales p
        LEFT JOIN Vent_tbJoyas j ON p.Prod_Id = j.Joya_Id AND p.Prxs_Dif = 1
        LEFT JOIN Vent_tbMaquillajes m ON p.Prod_Id = m.Maqu_Id AND p.Prxs_Dif = 0
        WHERE (j.Joya_Estado = 1 OR m.Maqu_Estado = 1)
        AND (@Sucu_Id = 2 OR p.Sucu_Id = Sucu_Id)
        GROUP BY Producto, Categoria;

    END IF;

END
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_Usuarios_inicioSesion`(
IN p_Usuario VARCHAR(100),
IN p_Contra VARCHAR(255)
)
BEGIN
SELECT 
usu.Usua_Id AS Usua_Id,
usu.Usua_Usuario AS Usua_Usuario,
usu.Usua_Contraseña AS Usua_Contraseña,
CONCAT(emp.Empl_Nombre, ' ', emp.Empl_Apellido) AS Empl_Nombre,
emp.Empl_Id,
r.Role_Id,
p.pant_descripcion,
p.Pant_Id,
pant_Identificador,
usu.Usua_Administrador,
S.Sucu_Id,
S.Sucu_Nombre,
ro.Role_Rol,
emp.Empl_Correo
FROM
acce_tbusuarios AS usu
LEFT JOIN gral_tbempleados AS emp ON usu.Empl_Id = emp.Empl_Id
LEFT JOIN acce_tbpantallasporroles AS r ON r.Role_Id = usu.Role_Id
LEFT JOIN acce_tbpantallas AS p ON p.Pant_Id = r.Pant_Id
LEFT JOIN gral_tbsucursales S ON S.Sucu_Id = emp.Sucu_Id
LEFT JOIN acce_tbroles AS ro ON ro.Role_Id = usu.Role_Id
WHERE
usu.Usua_Usuario = p_Usuario
AND usu.Usua_Contraseña = p_Contra;
END


CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_Usuarios_inicioSesion`(
IN p_Usuario VARCHAR(100),
IN p_Contra VARCHAR(255)
)
BEGIN
SELECT 
usu.Usua_Id AS Usua_Id,
usu.Usua_Usuario AS Usua_Usuario,
usu.Usua_Contraseña AS Usua_Contraseña,
CONCAT(emp.Empl_Nombre, ' ', emp.Empl_Apellido) AS Empl_Nombre,
emp.Empl_Id,
r.Role_Id,
p.pant_Descripcion,
p.Pant_Id,
p.Pant_Identificador,
usu.Usua_Administrador,
S.Sucu_Id,
S.Sucu_Nombre,
ro.Role_Rol,
emp.Empl_Correo
FROM
acce_tbusuarios AS usu
LEFT JOIN gral_tbempleados AS emp ON usu.Empl_Id = emp.Empl_Id
LEFT JOIN acce_tbpantallasporroles AS r ON r.Role_Id = usu.Role_Id
LEFT JOIN acce_tbpantallas AS p ON p.Pant_Id = r.Pant_Id
LEFT JOIN gral_tbsucursales S ON S.Sucu_Id = emp.Sucu_Id
LEFT JOIN acce_tbroles AS ro ON ro.Role_Id = usu.Role_Id
WHERE
usu.Usua_Usuario = p_Usuario
AND usu.Usua_Contraseña = p_Contra;
END
------------------------------------------------------------------20/6/2024
DELIMITER ;;
CREATE  PROCEDURE `SP_Ventas_Del_Mes`()
BEGIN
    SELECT COUNT(*) AS VentasDelMes
    FROM dbSistemaEsmeralda.vent_tbfactura
    WHERE YEAR(Fact_FechaFinalizado) = YEAR(CURDATE())
      AND MONTH(Fact_FechaFinalizado) = MONTH(CURDATE())
      AND Fact_Finalizado = 1; -- Ajusta según tu lógica de negocio
END ;;
DELIMITER ;

DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_Ventas_Del_Mes_FacturaCompra`()
BEGIN
    SELECT COUNT(*) AS VentasDelMes
    FROM dbSistemaEsmeralda.vent_tbfacturacompraencabezado
    WHERE YEAR(FaCE_fechafinalizacion) = YEAR(CURDATE())
      AND MONTH(FaCE_fechafinalizacion) = MONTH(CURDATE())
      AND FaCE_Finalizada = 1; -- Ajusta según tu lógica de negocio
END ;;
DELIMITER ;

DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_Top6_Mejores_Clientes_Actual`()
BEGIN
    SELECT CONCAT(cl.Clie_DNI, ' ', cl.Clie_Nombre, ' ', cl.Clie_Apellido) AS Cliente,
           FORMAT(SUM(fe.Fact_Cambio), 2) AS TotalCompra
    FROM dbSistemaEsmeralda.vent_tbfactura fe
    JOIN dbSistemaEsmeralda.gral_tbclientes cl ON fe.Clie_Id = cl.Clie_Id
    WHERE YEAR(fe.Fact_FechaCreacion) = YEAR(CURDATE()) AND MONTH(fe.Fact_FechaCreacion) = MONTH(CURDATE())
    GROUP BY cl.Clie_Id
    ORDER BY TotalCompra DESC
    LIMIT 6;
END ;;
DELIMITER ;

DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_Productos_Del_Mes`()
BEGIN
    SELECT COUNT(DISTINCT Producto_Id) AS ProductosDelMes
    FROM (
        SELECT Joya_Id AS Producto_Id
        FROM dbSistemaEsmeralda.vent_tbjoyas
        WHERE (YEAR(Joya_FechaCreacion) = YEAR(CURDATE()) AND MONTH(Joya_FechaCreacion) = MONTH(CURDATE()))
           OR (YEAR(Joya_FechaModificacion) = YEAR(CURDATE()) AND MONTH(Joya_FechaModificacion) = MONTH(CURDATE()))
        
        UNION ALL
        
        SELECT Maqu_Id AS Producto_Id
        FROM dbSistemaEsmeralda.vent_tbmaquillajes
        WHERE (YEAR(Maqu_FechaCreacion) = YEAR(CURDATE()) AND MONTH(Maqu_FechaCreacion) = MONTH(CURDATE()))
           OR (YEAR(Maqu_FechaModificacion) = YEAR(CURDATE()) AND MONTH(Maqu_FechaModificacion) = MONTH(CURDATE()))
        
        UNION ALL
        
        SELECT Repa_Id AS Producto_Id
        FROM dbSistemaEsmeralda.vent_tbreparaciones
        WHERE (YEAR(Repa_FechaCreacion) = YEAR(CURDATE()) AND MONTH(Repa_FechaCreacion) = MONTH(CURDATE()))
           OR (YEAR(Repa_FechaModifica) = YEAR(CURDATE()) AND MONTH(Repa_FechaModifica) = MONTH(CURDATE()))
    ) AS Productos;
END ;;
DELIMITER ;

DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_Clientes_Nuevos_Activos`()
BEGIN
    -- Contar clientes nuevos o activos basados en las facturas del mes actual
    SELECT COUNT(DISTINCT Clie_Id) AS ClientesNuevosActivos
    FROM dbSistemaEsmeralda.vent_tbfactura
    WHERE YEAR(Fact_FechaCreacion) = YEAR(CURDATE()) AND MONTH(Fact_FechaCreacion) = MONTH(CURDATE());
END ;;
DELIMITER ;

DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_Dash_CantidadProducto_anual`()
BEGIN
    SELECT 'Joyas' AS Producto, COUNT(*) AS Cantidad
    FROM vent_tbfacturadetalles D
    INNER JOIN vent_tbfactura F ON D.Fact_Id = F.Fact_Id
    INNER JOIN vent_tbjoyas J ON D.Prod_Id = J.Joya_Id
    WHERE FaxD_Dif = 0
    
    UNION ALL
    
    SELECT 'Maquillaje' AS Producto, COUNT(*) AS Cantidad
    FROM vent_tbfacturadetalles D
    INNER JOIN vent_tbfactura F ON D.Fact_Id = F.Fact_Id
    INNER JOIN vent_tbmaquillajes M ON D.Prod_Id = M.Maqu_Id
    WHERE FaxD_Dif = 1 AND Fact_Finalizado = 0;
END ;;
DELIMITER ;



DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_SumaMontosFinalesMesActual`()
BEGIN
    SELECT 
        SUM(caja_MontoFinal) AS TotalMontoFinal
    FROM 
        vent_tbcajas
    WHERE
        MONTH(caja_FechaCierre) = MONTH(CURRENT_DATE()) AND 
        YEAR(caja_FechaCierre) = YEAR(CURRENT_DATE()) AND
        caja_Finalizado = 1;
END ;;
DELIMITER ;

DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_CajaMontoInicialMesActual`()
BEGIN
    SELECT 
        caja_MontoInicial
    FROM 
       vent_tbcajas 
    WHERE 
        MONTH(caja_FechaApertura) = MONTH(CURRENT_DATE()) AND 
        YEAR(caja_FechaApertura) = YEAR(CURRENT_DATE())
    ORDER BY 
        caja_FechaApertura ASC
    LIMIT 1;
END ;;
DELIMITER ;

-- Crear el procedimiento almacenado para ventas con efectivo
DELIMITER ;;

CREATE PROCEDURE sp_VentasPorEfectivo()
BEGIN
    SELECT 
        'Efectivo' AS MetodoPago,
        CONCAT('Lps. ', FORMAT(SUM(Fact_Pago), 2)) AS TotalEnLempiras
    FROM 
        vent_tbfactura F
    JOIN 
        gral_tbmetodospago MP ON F.Mepa_Id = MP.Mepa_Id
    WHERE 
        MP.Mepa_Metodo = 'Efectivo';
END ;;

DELIMITER ;

-- Crear el procedimiento almacenado para ventas con tarjeta de crédito
DELIMITER ;;

CREATE PROCEDURE sp_VentasPorTarjeta()
BEGIN
    SELECT 
        'Tarjeta de Crédito' AS MetodoPago,
        CONCAT('Lps. ', FORMAT(SUM(Fact_Pago), 2)) AS TotalEnLempiras
    FROM 
        vent_tbfactura F
    JOIN 
        gral_tbmetodospago MP ON F.Mepa_Id = MP.Mepa_Id
    WHERE 
        MP.Mepa_Metodo = 'Tarjeta de Crédito';
END ;;

DELIMITER ;

-- Crear el procedimiento almacenado para ventas con pago en línea
DELIMITER ;;

CREATE PROCEDURE sp_VentasPorPagoEnLinea()
BEGIN
    SELECT 
        'Pago en Línea' AS MetodoPago,
        CONCAT('Lps. ', FORMAT(SUM(Fact_Pago), 2)) AS TotalEnLempiras
    FROM 
        vent_tbfactura F
    JOIN 
        gral_tbmetodospago MP ON F.Mepa_Id = MP.Mepa_Id
    WHERE 
        MP.Mepa_Metodo = 'Pago en Línea';
END ;;

DELIMITER ;;

CREATE PROCEDURE sp_Dash_CantidadProducto_Mes()
BEGIN
   SELECT 'Joyas' AS Producto, SUM(D.FaxD_Cantidad) AS Cantidad
FROM vent_tbfacturadetalles D
INNER JOIN vent_tbfactura F ON D.Fact_Id = F.Fact_Id
INNER JOIN vent_tbjoyas J ON D.Prod_Codigo = J.Joya_Codigo
WHERE MONTH(F.Fact_FechaCreacion) = MONTH(CURRENT_DATE())
AND YEAR(F.Fact_FechaCreacion) = YEAR(CURRENT_DATE()) AND D.FaxD_Dif = 1
UNION ALL
SELECT 'Maquillaje' AS Producto, SUM(D.FaxD_Cantidad) AS Cantidad
FROM vent_tbfacturadetalles D
INNER JOIN vent_tbfactura F ON D.Fact_Id = F.Fact_Id
INNER JOIN vent_tbmaquillajes M ON D.Prod_Codigo = M.Maqu_Codigo
WHERE MONTH(F.Fact_FechaCreacion) = MONTH(CURRENT_DATE())
AND YEAR(F.Fact_FechaCreacion) = YEAR(CURRENT_DATE()) AND D.FaxD_Dif = 0 AND F.Fact_Finalizado = 0;

END //

DELIMITER ;

CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_TransaccionesRecientes`()
BEGIN
    -- Obtener la factura de venta más reciente junto con sus detalles y nombre del cliente
    SELECT 
        V.Fact_Id AS Transaccion, 
        C.Clie_Nombre AS Cliente, -- Nombre del cliente
        DV.Prod_Codigo AS ProductoCodigo, 
        DV.FaxD_Cantidad AS Cantidad, 
        DV.FaxD_Precio AS Precio
    FROM 
        vent_tbfactura V
    JOIN 
        vent_tbfacturadetalles DV ON V.Fact_Id = DV.Fact_Id
    JOIN
        gral_tbclientes C ON V.Clie_Id = C.Clie_Id -- Unir con la tabla de clientes
    WHERE 
        V.Fact_Id = (SELECT MAX(Fact_Id) FROM vent_tbfactura) -- Factura más reciente
    ORDER BY 
        V.Fact_Id DESC
    LIMIT 1;
END